mogler@mogler-pc:~/repos/HTWG/sysprog$ cd src/aufgabe03
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ ls
Makefile  stringsort  stringsort.c  Stringsort.class  Stringsort.java  stringsort-opti  stringsort-opti.c  stringsort-optimiert  stringsort-optimiert.c
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ clear
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ javac Stringsort.java
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ java Stringsort 200
Unsortiertes Array:
130 29 41 180 144 107 76 89 140 63 158 126 103 69 83 34 168 7 23 152 17 86 124 6 33 197 68 138 75 145 101 16 140 105 26 5 26 134 54 177 159 94 99 109 21 92 121 161 20 4 66 168 54 197 97 11 11 7 195 174 16 46 55 35 147 67 199 49 89 125 192 64 185 57 5 84 113 131 7 92 70 24 58 6 33 74 33 49 36 7 26 38 181 86 115 19 193 126 163 69 98 45 150 34 67 194 65 41 160 137 123 198 98 88 84 182 24 26 119 19 169 103 171 36 110 61 128 109 117 8 36 54 55 122 133 122 43 31 88 126 108 63 25 52 69 184 44 36 5 192 31 22 30 156 90 70 111 112 103 12 145 196 20 39 182 63 104 157 21 34 113 81 51 3 43 50 163 5 141 196 142 120 54 198 166 123 181 191 84 50 70 165 153 13 112 52 170 32 27 63
Sortiertes Array:
101 103** 104 105 107 108 109* 11* 110 111 112* 113* 115 117 119 12 120 121 122* 123* 124 125 126** 128 13 130 131 133 134 137 138 140* 141 142 144 145* 147 150 152 153 156 157 158 159 16* 160 161 163* 165 166 168* 169 17 170 171 174 177 180 181* 182* 184 185 19* 191 192* 193 194 195 196* 197* 198* 199 20* 21* 22 23 24* 25 26*** 27 29 3 30 31* 32 33** 34** 35 36*** 38 39 4 41* 43* 44 45 46 49* 5*** 50* 51 52* 54*** 55* 57 58 6* 61 63*** 64 65 66 67* 68 69** 7*** 70** 74 75 76 8 81 83 84** 86* 88* 89* 90 92* 94 97 98* 99
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ make stringsort
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort.c   -o stringsort
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ ./stringsort 200
Unsortiertes Array:
54 128 175 135 182 31 60 174 176 104 177 29 28 134 170 68 5 41 100 35 77 49 49 35 144 87 113 115 5 194 3 11 75 131 99 9 114 159 183 90 63 160 72 44 46 194 64 51 187 165 38 64 166 87 51 110 175 164 178 132 110 133 144 137 64 43 146 178 154 81 21 170 41 45 166 39 191 30 90 178 147 81 194 114 168 45 24 95 161 154 28 71 88 124 9 104 119 107 35 73 189 56 195 182 53 161 22 44 144 64 22 91 145 168 157 66 13 134 161 174 88 141 197 176 65 158 81 184 18 68 10 7 76 157 141 129 119 163 125 15 180 99 106 125 67 64 143 32 198 105 158 38 198 155 167 64 66 0 0 84 68 162 43 144 120 184 73 39 100 198 54 80 97 112 157 116 128 53 148 78 110 106 117 108 13 84 172 79 84 125 115 152 87 110 48 7 47 121 198 147
Sortiertes Array:
0* 10 100* 104* 105 106* 107 108 11 110*** 112 113 114* 115* 116 117 119* 120 121 124 125** 128* 129 13* 131 132 133 134* 135 137 141* 143 144*** 145 146 147* 148 15 152 154* 155 157** 158* 159 160 161** 162 163 164 165 166* 167 168* 170* 172 174* 175* 176* 177 178** 18 180 182* 183 184* 187 189 191 194** 195 197 198*** 21 22* 24 28* 29 3 30 31 32 35** 38* 39* 41* 43* 44* 45* 46 47 48 49* 5* 51* 53* 54* 56 60 63 64***** 65 66* 67 68** 7* 71 72 73* 75 76 77 78 79 80 81** 84** 87** 88* 9* 90* 91 95 97 99*
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ valgrind ./stringsort 200
==35803== Memcheck, a memory error detector
==35803== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==35803== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
==35803== Command: ./stringsort 200
==35803==
Unsortiertes Array:
95 178 177 22 10 159 90 176 83 30 187 112 40 29 120 99 111 84 138 160 179 26 30 123 122 120 85 31 92 117 101 140 48 30 162 58 189 4 186 24 34 174 88 75 155 9 126 66 45 16 26 24 42 8 99 116 80 184 147 125 102 0 65 102 31 179 112 172 136 98 149 170 24 37 197 179 46 76 197 91 44 175 67 39 183 167 155 64 103 103 141 5 55 6 59 86 137 171 11 73 70 160 196 46 197 145 26 196 21 23 39 66 199 107 105 134 74 12 150 177 67 91 135 123 97 194 161 187 118 172 60 188 84 56 34 34 2 12 30 175 188 69 193 139 176 50 73 2 63 176 132 130 67 19 53 117 165 167 104 83 91 164 23 176 173 10 10 127 174 40 54 162 61 48 53 190 50 127 192 65 103 76 196 122 47 1 39 13 120 143 48 12 60 72 188 185 34 150 112 8
Sortiertes Array:
0 1 10** 101 102* 103** 104 105 107 11 111 112** 116 117* 118 12** 120** 122* 123* 125 126 127* 13 130 132 134 135 136 137 138 139 140 141 143 145 147 149 150* 155* 159 16 160* 161 162* 164 165 167* 170 171 172* 173 174* 175* 176*** 177* 178 179** 183 184 185 186 187* 188** 189 19 190 192 193 194 196** 197** 199 2* 21 22 23* 24** 26** 29 30*** 31* 34*** 37 39** 4 40* 42 44 45 46* 47 48** 5 50* 53* 54 55 56 58 59 6 60* 61 63 64 65* 66* 67** 69 70 72 73* 74 75 76* 8* 80 83* 84* 85 86 88 9 90 91** 92 95 97 98 99*
==35803==
==35803== HEAP SUMMARY:
==35803==     in use at exit: 0 bytes in 0 blocks
==35803==   total heap usage: 204 allocs, 204 frees, 9,441 bytes allocated
==35803==
==35803== All heap blocks were freed -- no leaks are possible
==35803==
==35803== For lists of detected and suppressed errors, rerun with: -s
==35803== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ make cppcheck
cppcheck --enable=warning,style --std=c11 stringsort.c
Checking stringsort.c ...
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$



mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ make stringsort-optimiert
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort-optimiert.c   -o stringsort-optimiert
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ ./stringsort-optimiert 200
Unsortiertes Array:
161 128 51 142 106 32 96 116 57 42 170 41 60 13 141 189 36 153 71 182 185 54 121 94 20 127 71 5 1 70 36 115 198 39 9 56 71 57 124 129 100 95 122 160 60 15 149 96 169 172 78 106 26 151 1 198 31 24 3 184 94 191 99 45 182 60 101 54 118 26 135 18 73 9 130 133 24 31 181 145 3 11 52 29 114 5 27 145 29 183 130 76 126 181 73 109 194 174 115 112 152 2 82 177 11 164 110 187 195 43 133 198 54 137 179 121 142 158 66 123 93 196 151 20 130 24 81 124 151 148 36 103 150 70 81 113 34 143 100 29 139 33 179 193 122 158 114 64 116 133 140 10 81 91 182 11 116 63 135 19 11 123 122 113 145 155 26 131 99 126 160 38 112 139 183 34 49 50 51 166 135 143 128 16 34 110 28 102 125 115 121 88 191 196 1 88 151 27 20 2
Sortiertes Array:
1** 10 100* 101 102 103 106* 109 11*** 110* 112* 113* 114* 115** 116** 118 121** 122** 123* 124* 125 126* 127 128* 129 13 130** 131 133** 135** 137 139* 140 141 142* 143* 145** 148 149 15 150 151*** 152 153 155 158* 16 160* 161 164 166 169 170 172 174 177 179* 18 181* 182** 183* 184 185 187 189 19 191* 193 194 195 196* 198** 2* 20** 24** 26** 27* 28 29** 3* 31* 32 33 34** 36** 38 39 41 42 43 45 49 5* 50 51* 52 54** 56 57* 60** 63 64 66 70* 71** 73* 76 78 81** 82 88* 9* 91 93 94* 95 96* 99*
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ valgrind ./stringsort-optimiert 200
==35876== Memcheck, a memory error detector
==35876== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==35876== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
==35876== Command: ./stringsort-optimiert 200
==35876==
Unsortiertes Array:
173 169 161 58 140 2 193 159 146 192 33 164 62 178 84 165 46 137 109 13 114 105 40 138 101 178 140 10 40 82 187 13 52 148 23 192 102 168 103 48 161 89 164 23 67 49 140 65 138 49 79 52 106 119 142 159 49 34 170 89 116 157 55 120 105 78 65 7 199 168 8 160 57 172 135 77 173 75 142 111 76 173 115 182 92 9 141 94 195 63 183 64 20 38 184 77 69 49 37 68 170 45 180 179 169 115 8 95 142 103 6 18 76 74 152 121 35 45 15 31 109 198 95 129 189 31 159 58 33 196 78 3 41 58 182 162 125 191 57 67 94 16 37 122 90 189 195 77 34 10 108 95 161 155 177 150 139 136 160 172 132 190 175 125 48 109 87 173 52 145 192 98 113 29 21 155 170 16 32 156 179 141 52 140 48 29 42 187 165 154 159 97 144 86 22 192 196 61 117 48
Sortiertes Array:
==35876== Conditional jump or move depends on uninitialised value(s)
==35876==    at 0x4849B10: strncat (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==35876==    by 0x109676: main (stringsort-optimiert.c:85)
==35876==
10* 101 102 103* 105* 106 108 109** 111 113 114 115* 116 117 119 120 121 122 125* 129 13* 132 135 136 137 138* 139 140*** 141* 142** 144 145 146 148 15 150 152 154 155* 156 157 159*** 16* 160* 161** 162 164* 165* 168* 169* 170** 172* 173*** 175 177 178* 179* 18 180 182* 183 184 187* 189* 190 191 192*** 193 195* 196* 198 199 2 20 21 22 23* 29* 3 31* 32 33* 34* 35 37* 38 40* 41 42 45* 46 48*** 49*** 52*** 55 57* 58** 6 61 62 63 64 65* 67* 68 69 7 74 75 76* 77** 78* 79 8* 82 84 86 87 89* 9 90 92 94* 95** 97 98
==35876==
==35876== HEAP SUMMARY:
==35876==     in use at exit: 0 bytes in 0 blocks
==35876==   total heap usage: 4 allocs, 4 frees, 7,858 bytes allocated
==35876==
==35876== All heap blocks were freed -- no leaks are possible
==35876==
==35876== Use --track-origins=yes to see where uninitialised values come from
==35876== For lists of detected and suppressed errors, rerun with: -s
==35876== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$



mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ time ./stringsort 20000 > /dev/null

real    0m3,975s
user    0m3,971s
sys     0m0,004s
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ time ./stringsort-optimiert 20000 > /dev/null

real    0m4,063s
user    0m4,063s
sys     0m0,000s
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$



mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$ astyle -p -H --style=ansi stringsort.c stringsort-optimiert.c
Formatted  /home/mogler/repos/HTWG/sysprog/src/aufgabe03/stringsort.c
Formatted  /home/mogler/repos/HTWG/sysprog/src/aufgabe03/stringsort-optimiert.c
mogler@mogler-pc:~/repos/HTWG/sysprog/src/aufgabe03$